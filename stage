/**************************************************************************
 * Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
 *                                                                        *
 * Author: The ALICE Off-line Project.                                    *
 * Contributors are mentioned in the code where appropriate.              *
 *                                                                        *
 * Permission to use, copy, modify and distribute this software and its   *
 * documentation strictly for non-commercial purposes is hereby granted   *
 * without fee, provided that the above copyright notice appears in all   *
 * copies and that both the copyright notice and this permission notice   *
 * appear in the supporting documentation. The authors make no claims     *
 * about the suitability of this software for any purpose. It is          *
 * provided "as is" without express or implied warranty.                  *
 **************************************************************************/
/* AliAnaysisTaskMyTask
 *
 * empty task which can serve as a starting point for building an analysis
 * as an example, one histogram is filled
 */
#include "AliAnalysisTaskMyTask.h"
#include <vector>
#include "AliAODEvent.h"
#include "AliAODInputHandler.h"
#include "AliAnalysisManager.h"
#include "AliAnalysisTask.h"
#include "AliDetectorPID.h"
#include "AliKFParticle.h"
#include "AliPID.h"
#include "AliPIDResponse.h"
#include "TChain.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH3F.h"
#include "TList.h"
#include "TLorentzVector.h"
#include "TMath.h"
class AliAnalysisTaskMyTask;  // your analysis class
using namespace std;  // std namespace: so you can do things like 'cout'
ClassImp(AliAnalysisTaskMyTask)  // classimp: necessary for root
    AliAnalysisTaskMyTask::AliAnalysisTaskMyTask()
    : AliAnalysisTaskSE(),
      fAOD(0),
      fOutputList1(0),
      fOutputList2(0),
      fOutputList3(0),
      fHistPt(0),
      fHistPtElectron(0),
      fHistPtPhoton(0),
      fHistPtPion(0),
      fHistPz(0),
      fHistNEvents(0),
      fHistEta(0),
      fHistPhi(0),
      fHistMult(0),
      fHistVertex(0),
      fHistEnergy(0),
      fHistCharge(0),
      fHistPE(0),
      fHistInvariantMass(0),
      fHistInvariantMassPi1(0),
      fHistInvariantMassPi2(0),
      fHistInvariantMassPi3(0),
      fHistInvariantMassPi4(0),
      fHistInvariantMassPhoton(0),
      fHistElectronPE(0),
      fPIDResponse(0),
      fHistStatus(0) {
  // default constructor, don't allocate memory here!
  // this is used by root for IO purposes, it needs to remain empty
}
//_____________________________________________________________________________
AliAnalysisTaskMyTask::AliAnalysisTaskMyTask(const char* name)
    : AliAnalysisTaskSE(name),
      fAOD(0),
      fOutputList1(0),
      fOutputList2(0),
      fOutputList3(0),
      fHistPt(0),
      fHistPtElectron(0),
      fHistPtPhoton(0),
      fHistPtPion(0),
      fHistPz(0),
      fHistNEvents(0),
      fHistEta(0),
      fHistPhi(0),
      fHistMult(0),
      fHistVertex(0),
      fHistEnergy(0),
      fHistCharge(0),
      fHistPE(0),
      fHistInvariantMass(0),
      fHistInvariantMassPi1(0),
      fHistInvariantMassPi2(0),
      fHistInvariantMassPi3(0),
      fHistInvariantMassPi4(0),
      fHistInvariantMassPhoton(0),
      fHistElectronPE(0),
      fPIDResponse(0),
      fHistStatus(0) {
  // constructor
  DefineInput(
      0, TChain::Class());  // define the input of the analysis: in this case we
                            // take a 'chain' of events this chain is created by
                            // the analysis manager, so no need to worry about
                            // it, it does its work automatically
  DefineOutput(
      1, TList::Class());  // define the ouptut of the analysis: in this case
                           // it's a list of histograms you can add more output
                           // objects by calling DefineOutput(2,
                           // classname::Class()) if you add more output
                           // objects, make sure to call PostData for all of
                           // them, and to make changes to your AddTask macro!
  DefineOutput(2, TList::Class());
  DefineOutput(3, TList::Class());
}
//_____________________________________________________________________________
AliAnalysisTaskMyTask::~AliAnalysisTaskMyTask() {
  // destructor
  if (fOutputList1) {
    delete fOutputList1;  // at the end of your task, it is deleted from memory
                          // by calling this function
  }
  if (fOutputList2) {
    delete fOutputList2;
  }
  if (fOutputList3) {
    delete fOutputList3;
  }
}
//_____________________________________________________________________________
void AliAnalysisTaskMyTask::UserCreateOutputObjects() {
  // create output objects
  //
  // this function is called ONCE at the start of your analysis (RUNTIME)
  // here you ceate the histograms that you want to use
  //
  // the histograms are in this case added to a tlist, this list is in the end
  // saved to an output file
  //
  fOutputList1 =
      new TList();  // this is a list which will contain all of your histograms
                    // at the end of the analysis, the contents of this list are
                    // written to the output file
  fOutputList1->SetOwner(
      kTRUE);  // memory stuff: the list is owner of all objects it contains and
               // will delete them if requested (dont worry about this now)
  fOutputList2 = new TList();
  fOutputList2->SetOwner(kTRUE);
  fOutputList3 = new TList();
  fOutputList3->SetOwner(kTRUE);
  // example of a histogram
  fHistPt =
      new TH1F("fHistPt", "fHistPt", 100, 0, 20);  // create some histograms
  fHistPtElectron = new TH1F("fHistPtElectron", "fHistPtElectron", 200, 0, 1.5);
  fHistPtPhoton = new TH1F("fHistPtPhoton", "fHistPtPhoton", 200, 0, 1.5);
  fHistPtPion = new TH1F("fHistPtPion", "fHistPtPion", 200, 0, 2.5);
  fHistPz = new TH1F("fHistPz", "fHistPz", 100, 0, 20);
  fHistNEvents = new TH1F("fHistNEvents", "fHistNEvents", 1, 0, 1);
  fHistEta = new TH1F("fHistEta", "fHistEta", 100, -4, 4);
  fHistPhi = new TH1F("fHistPhi", "fHistPhi", 100, 0, 10);
  fHistMult = new TH1F("fHistMult", "fHistMult", 100, 0, 10000);
  fHistStatus = new TH1F("fHistStatus", "fHistStatus", 4, -0.5, 3.5);
  fHistVertex = new TH3F("fHistVertex", "fHistVertex", 101, -0.5, 0.5, 101,
                         -0.5, 0.5, 201, -15, 15);  // fancy 3D vertex histogram
  fHistVertex->GetXaxis()->SetTitle("X");
  fHistVertex->GetYaxis()->SetTitle("Y");
  fHistVertex->GetZaxis()->SetTitle("Z");
  fHistEnergy = new TH1F("fHistEnergy", "fHistEnergy", 100, 0, 6);
  fHistCharge = new TH1F("fHistCharge", "fHistCharge", 5, -2.5, 2.5);
  fHistPE = new TH2F("fHistPE", "fHistPE", 100, 0, 6, 101, 0, 0.0000001);
  fHistPE->GetXaxis()->SetTitle("Momentum");
  fHistPE->GetYaxis()->SetTitle("Energy-loss in TPC");
  fHistInvariantMass =
      new TH1F("fHistInvariantMassPi0", "fHistInvariantMassPi0", 200, 0, 0.3);
  fHistInvariantMassPhoton = new TH1F("fHistInvariantMassPhoton",
                                      "fHistInvariantMassPhoton", 100, 0, .7);
  fHistInvariantMassPi1 = new TH1F("fHistInvariantMassPi0_1",
                                   "fHistInvariantMassPi0_1", 200, 0, 0.3);
  fHistInvariantMassPi2 = new TH1F("fHistInvariantMassPi0_2",
                                   "fHistInvariantMassPi0_2", 200, 0, 0.3);
  fHistInvariantMassPi3 = new TH1F("fHistInvariantMassPi0_3",
                                   "fHistInvariantMassPi0_3", 200, 0, 0.3);
  fHistInvariantMassPi4 = new TH1F("fHistInvariantMassPi0_4",
                                   "fHistInvariantMassPi0_4", 200, 0, 0.3);
  fHistInvariantMass->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMass->GetYaxis()->SetTitle("Entries");
  fHistInvariantMassPi1->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMassPi1->GetYaxis()->SetTitle("Entries");
  fHistInvariantMassPi2->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMassPi2->GetYaxis()->SetTitle("Entries");
  fHistInvariantMassPi3->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMassPi3->GetYaxis()->SetTitle("Entries");
  fHistInvariantMassPi4->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMassPi4->GetYaxis()->SetTitle("Entries");
  fHistInvariantMassPhoton->GetXaxis()->SetTitle("Mass (GeV)");
  fHistInvariantMassPhoton->GetYaxis()->SetTitle("Entries");
  fHistPtPion->GetXaxis()->SetTitle("Momentum (GeV)");
  fHistPtPion->GetYaxis()->SetTitle("Entries");
  fHistElectronPE = new TH2F("fHistElectronPE", "fHistElectronPE", 1000, 0, 100,
                             1000, 0, 100);
  fOutputList2->Add(fHistCharge);
  fOutputList2->Add(fHistPt);  // don't forget to add it to the list! the list
                               // will be written to file, so if you want
  fOutputList3->Add(fHistPtElectron);
  fOutputList3->Add(fHistPtPhoton);
  fOutputList3->Add(fHistPtPion);
  fOutputList2->Add(fHistPz);
  // your histogram in the output file, add it to the list!
  fOutputList1->Add(fHistNEvents);
  fOutputList1->Add(fHistEta);
  fOutputList1->Add(fHistPhi);
  fOutputList1->Add(fHistMult);
  fOutputList1->Add(fHistVertex);
  fOutputList1->Add(fHistStatus);
  fOutputList2->Add(fHistEnergy);
  fOutputList2->Add(fHistPE);
  fOutputList2->Add(fHistElectronPE);
  fOutputList3->Add(fHistInvariantMass);
  fOutputList3->Add(fHistInvariantMassPhoton);
  fOutputList3->Add(fHistInvariantMassPi1);
  fOutputList3->Add(fHistInvariantMassPi2);
  fOutputList3->Add(fHistInvariantMassPi3);
  fOutputList3->Add(fHistInvariantMassPi4);
  PostData(
      1, fOutputList1);  // postdata will notify the analysis manager of changes
                         // / updates to the fOutputList object. the manager
                         // will in the end take care of writing your output to
                         // file so it needs to know what's in the output
  PostData(2, fOutputList2);
  PostData(3, fOutputList3);
}
//_____________________________________________________________________________
void AliAnalysisTaskMyTask::UserExec(Option_t*) {
  fPIDResponse = fInputHandler->GetPIDResponse();
  // user exec
  // this function is called once for each event
  // the manager will take care of reading the events from file, and with the
  // static function InputEvent() you have access to the current event. once you
  // return from the UserExec function, the manager will retrieve the next event
  // from the chain
  fAOD = dynamic_cast<AliAODEvent*>(InputEvent());
  // get an event (called fAOD) from the input file
  // there's another event format (ESD) which works in a similar wya
  // but is more cpu/memory unfriendly. for now, we'll stick with aod's
  if (!fAOD) return;
  // if the pointer to the event is empty (getting it failed) skip
  // this event
  // example part: i'll show how to loop over the tracks in an event
  // and extract some information from them which we'll store in a histogram
  // auto fourVector = new TLorentzVector(0,0,0,0);
  auto fourVector = new TLorentzVector(0, 0, 0, 0);
  Int_t electronCounter = 0;
  Int_t positronCounter = 0;
  // see how many tracks there are in the event
  Int_t iTracks(fAOD->GetNumberOfTracks());
  std::vector<AliKFParticle> electrons;
  electrons.reserve(iTracks / 10);
  std::vector<Int_t> electron_id;
  electron_id.reserve(iTracks / 10);
  std::vector<AliKFParticle> positrons;
  positrons.reserve(iTracks / 10);
  std::vector<Int_t> positron_id;
  positron_id.reserve(iTracks / 10);
  for (Int_t i(0); i < iTracks; i++) {  // loop ove rall these tracks
    AliAODTrack* track = static_cast<AliAODTrack*>(fAOD->GetTrack(i));
    if (!track) continue;
    if (!track->TestFilterBit(AliAODTrack::kTrkTPCOnly)) continue;
    fHistPt->Fill(track->Pt());
    fHistPz->Fill(track->Pz());
    fHistEta->Fill(track->Eta());
    fHistPhi->Fill(track->Phi());
    fHistEnergy->Fill(track->E());
    fHistCharge->Fill(track->Charge());
    fHistPE->Fill(track->P(), track->GetTPCsignal());
    AliPIDResponse::EDetPidStatus status =
        fPIDResponse->CheckPIDStatus(AliPIDResponse::kTPC, track);
    fHistStatus->Fill(status);
    Double_t nsigmaTPC = -999;
    nsigmaTPC = fPIDResponse->NumberOfSigmasTPC(track, AliPID::kElectron);
    //  std::cout<< " nsigmaTPC "<< nsigmaTPC << std::endl;
    if ((nsigmaTPC < 1.5 && nsigmaTPC > -1.5 && track->P() > 0.25 &&
         track->P() < 0.46) ||
        ((nsigmaTPC < 1 && nsigmaTPC > -1 &&
          (track->P() > 0.63 && track->P() < 0.71)) ||
         (nsigmaTPC < 1 && nsigmaTPC > -1 && track->P() > 1.19))) {
      fHistElectronPE->Fill(track->P(), track->GetTPCsignal());
      if (track->Charge() == -1) {
        electronCounter += 1;
        AliKFParticle electron(*static_cast<AliVTrack*>(track), 11);
        electrons.push_back(electron);
        electron_id.push_back(track->GetID());
      } else {
        positronCounter += 1;
        AliKFParticle positron(*static_cast<AliVTrack*>(track), -11);
        positrons.push_back(positron);
        positron_id.push_back(track->GetID());
      }
    }
  }
  // For-loop-ception, let's see if it works or worken't
  // Reconstruct only gammas
  std::vector<AliKFParticle> photons;
  std::vector<std::array<Int_t, 2>> photon_track_ids;
  for (int i_electron(0); i_electron < electrons.size(); i_electron++) {
    for (int i_positron(0); i_positron < positrons.size(); i_positron++) {
      AliKFParticle photon(electrons[i_electron], positrons[i_positron]);
      if (photon.GetNDF() < 1) continue;
      if (photon.GetMass() > 0.7) continue;
      fHistPtPhoton->Fill(photon.GetPt());
      fHistInvariantMassPhoton->Fill(photon.GetMass());
      photons.push_back(photon);
      const std::array<Int_t, 2> daughters_id = {electron_id[i_electron],
                                                 positron_id[i_positron]};
      photon_track_ids.push_back(daughters_id);
    }
  }
  // Loop over gammas to reconstruct Pi0;
  for (int i_photon1(0); i_photon1 < photons.size(); i_photon1++) {
    const auto& daughters_id_1 = photon_track_ids[i_photon1];
    const auto& photon1 = photons[i_photon1];
    for (int i_photon2(i_photon1 + 1); i_photon2 < photons.size();
         i_photon2++) {
      const auto& daughters_id_2 = photon_track_ids[i_photon2];
      const auto& photon2 = photons[i_photon2];
      // Are the electrons the same?
      if (daughters_id_1[0] == daughters_id_2[0]) continue;
      // Are the positrons the same?
      if (daughters_id_1[1] == daughters_id_2[1]) continue;
      AliKFParticle pi0(photon1, photon2);
      if (pi0.GetMass() > 0.3) continue;
      fHistInvariantMass->Fill(pi0.GetMass());
      fHistPtPion->Fill(pi0.GetPt());
      if (pi0.GetPt() <= 0.4) {
        fHistInvariantMassPi1->Fill(pi0.GetMass());
      } else if (pi0.GetPt() <= 0.7) {
        fHistInvariantMassPi2->Fill(pi0.GetMass());
      } else if (pi0.GetPt() <= 1) {
        fHistInvariantMassPi3->Fill(pi0.GetMass());
      } else {
        fHistInvariantMassPi4->Fill(pi0.GetMass());
      }
    }
  }
  AliAODVertex* primaryVertex = fAOD->GetPrimaryVertex();
  fHistVertex->Fill(primaryVertex->GetX(), primaryVertex->GetY(),
                    primaryVertex->GetZ());
  fHistNEvents->Fill(0);
  fHistMult->Fill(iTracks);
  PostData(1, fOutputList1);  // stream the results the analysis of this event
                              // to the output manager which will take care of
                              // writing it to a file
  PostData(2, fOutputList2);
  PostData(3, fOutputList3);
}
//_____________________________________________________________________________
void AliAnalysisTaskMyTask::Terminate(Option_t*) {
  // terminate
  // called at the END of the analysis (when all events are processed)
}
//_____________________________________________________________________________
Collapse

